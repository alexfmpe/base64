<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="518.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="501" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="501" > </text>
<g id="frames">
<g >
<title>Criterion.Internal.runAndAnalyse (996 samples, 99.60%)</title><rect x="10.0" y="309" width="1175.3" height="15.0" fill="rgb(209,216,16)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >Criterion.Internal.runAndAnalyse</text>
</g>
<g >
<title>Data.Memory.Encoding.Base64.toBase64 (237 samples, 23.70%)</title><rect x="200.0" y="85" width="279.6" height="15.0" fill="rgb(242,190,44)" rx="2" ry="2" />
<text  x="202.98" y="95.5" >Data.Memory.Encoding.Base64.toBase64</text>
</g>
<g >
<title>Control.Concurrent.Async.mapConcurrently (86 samples, 8.60%)</title><rect x="10.0" y="165" width="101.5" height="15.0" fill="rgb(252,127,8)" rx="2" ry="2" />
<text  x="13.00" y="175.5" >Control.Conc..</text>
</g>
<g >
<title>Criterion.Main.defaultMainWith (996 samples, 99.60%)</title><rect x="10.0" y="405" width="1175.3" height="15.0" fill="rgb(232,196,41)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >Criterion.Main.defaultMainWith</text>
</g>
<g >
<title>Control.Monad.Catch.finally (996 samples, 99.60%)</title><rect x="10.0" y="293" width="1175.3" height="15.0" fill="rgb(235,117,51)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >Control.Monad.Catch.finally</text>
</g>
<g >
<title>Statistics.Resampling.estimate (1 samples, 0.10%)</title><rect x="113.8" y="149" width="1.2" height="15.0" fill="rgb(230,209,48)" rx="2" ry="2" />
<text  x="116.84" y="159.5" ></text>
</g>
<g >
<title>Data.ByteString.Base64.Internal.base64Padded.\ (232 samples, 23.20%)</title><rect x="905.6" y="85" width="273.8" height="15.0" fill="rgb(235,70,17)" rx="2" ry="2" />
<text  x="908.62" y="95.5" >Data.ByteString.Base64.Internal.base..</text>
</g>
<g >
<title>Statistics.Matrix.transpose (16 samples, 1.60%)</title><rect x="69.0" y="101" width="18.9" height="15.0" fill="rgb(246,48,7)" rx="2" ry="2" />
<text  x="72.00" y="111.5" ></text>
</g>
<g >
<title>MAIN.MAIN (996 samples, 99.60%)</title><rect x="10.0" y="453" width="1175.3" height="15.0" fill="rgb(246,226,23)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >MAIN.MAIN</text>
</g>
<g >
<title>Statistics.Matrix.transpose (17 samples, 1.70%)</title><rect x="14.7" y="117" width="20.1" height="15.0" fill="rgb(248,225,21)" rx="2" ry="2" />
<text  x="17.72" y="127.5" ></text>
</g>
<g >
<title>Statistics.Resampling.resample (2 samples, 0.20%)</title><rect x="113.8" y="213" width="2.4" height="15.0" fill="rgb(230,83,39)" rx="2" ry="2" />
<text  x="116.84" y="223.5" ></text>
</g>
<g >
<title>Data.ByteString.Base64.Internal.peek8_32 (175 samples, 17.50%)</title><rect x="661.4" y="69" width="206.5" height="15.0" fill="rgb(228,168,40)" rx="2" ry="2" />
<text  x="664.36" y="79.5" >Data.ByteString.Base64.Inte..</text>
</g>
<g >
<title>Data.ByteString.Base64.Internal.encodeWith (328 samples, 32.80%)</title><rect x="480.8" y="101" width="387.1" height="15.0" fill="rgb(237,54,37)" rx="2" ry="2" />
<text  x="483.82" y="111.5" >Data.ByteString.Base64.Internal.encodeWith</text>
</g>
<g >
<title>Data.ByteString.Base64.Internal.base64Padded.dlen (4 samples, 0.40%)</title><rect x="1179.4" y="85" width="4.7" height="15.0" fill="rgb(212,75,3)" rx="2" ry="2" />
<text  x="1182.38" y="95.5" ></text>
</g>
<g >
<title>Data.ByteString.Base64.Internal.encodeBase64/go (213 samples, 21.30%)</title><rect x="928.0" y="53" width="251.4" height="15.0" fill="rgb(246,104,42)" rx="2" ry="2" />
<text  x="931.04" y="63.5" >Data.ByteString.Base64.Internal.e..</text>
</g>
<g >
<title>Data.ByteString.Base64.encodeBase64 (268 samples, 26.80%)</title><rect x="867.9" y="117" width="316.2" height="15.0" fill="rgb(216,154,3)" rx="2" ry="2" />
<text  x="870.86" y="127.5" >Data.ByteString.Base64.encodeBase64</text>
</g>
<g >
<title>Data.ByteString.Base64.encode (329 samples, 32.90%)</title><rect x="479.6" y="117" width="388.3" height="15.0" fill="rgb(248,21,38)" rx="2" ry="2" />
<text  x="482.64" y="127.5" >Data.ByteString.Base64.encode</text>
</g>
<g >
<title>Criterion.Analysis.regress (88 samples, 8.80%)</title><rect x="10.0" y="213" width="103.8" height="15.0" fill="rgb(244,15,19)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >Criterion.An..</text>
</g>
<g >
<title>Criterion.Measurement.runBenchmark (905 samples, 90.50%)</title><rect x="116.2" y="213" width="1067.9" height="15.0" fill="rgb(239,218,26)" rx="2" ry="2" />
<text  x="119.20" y="223.5" >Criterion.Measurement.runBenchmark</text>
</g>
<g >
<title>Control.Concurrent.Async.forConcurrently (86 samples, 8.60%)</title><rect x="10.0" y="181" width="101.5" height="15.0" fill="rgb(254,129,9)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >Control.Conc..</text>
</g>
<g >
<title>Criterion.Main.runMode (996 samples, 99.60%)</title><rect x="10.0" y="389" width="1175.3" height="15.0" fill="rgb(215,36,3)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >Criterion.Main.runMode</text>
</g>
<g >
<title>Control.Monad.Catch.bracket (996 samples, 99.60%)</title><rect x="10.0" y="261" width="1175.3" height="15.0" fill="rgb(233,1,25)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >Control.Monad.Catch.bracket</text>
</g>
<g >
<title>System.IO.CodePage.withCP65001 (996 samples, 99.60%)</title><rect x="10.0" y="357" width="1175.3" height="15.0" fill="rgb(213,170,32)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >System.IO.CodePage.withCP65001</text>
</g>
<g >
<title>Data.ByteString.Base64.Internal.encode/fill (316 samples, 31.60%)</title><rect x="495.0" y="85" width="372.9" height="15.0" fill="rgb(244,69,22)" rx="2" ry="2" />
<text  x="497.98" y="95.5" >Data.ByteString.Base64.Internal.encode/fill</text>
</g>
<g >
<title>Data.ByteString.Base64.Internal.peek8 (3 samples, 0.30%)</title><rect x="655.5" y="53" width="3.5" height="15.0" fill="rgb(231,99,19)" rx="2" ry="2" />
<text  x="658.46" y="63.5" ></text>
</g>
<g >
<title>Statistics.Sample.stdDev (1 samples, 0.10%)</title><rect x="113.8" y="133" width="1.2" height="15.0" fill="rgb(216,9,19)" rx="2" ry="2" />
<text  x="116.84" y="143.5" ></text>
</g>
<g >
<title>UNKNOWN (4 samples, 0.40%)</title><rect x="1185.3" y="453" width="4.7" height="15.0" fill="rgb(205,17,19)" rx="2" ry="2" />
<text  x="1188.28" y="463.5" ></text>
</g>
<g >
<title>Statistics.Matrix.multiplyV (6 samples, 0.60%)</title><rect x="61.9" y="101" width="7.1" height="15.0" fill="rgb(239,209,52)" rx="2" ry="2" />
<text  x="64.92" y="111.5" ></text>
</g>
<g >
<title>Statistics.Regression.ols (45 samples, 4.50%)</title><rect x="34.8" y="117" width="53.1" height="15.0" fill="rgb(246,92,9)" rx="2" ry="2" />
<text  x="37.78" y="127.5" >Stati..</text>
</g>
<g >
<title>Data.ByteString.Base64.Internal.peek8 (51 samples, 5.10%)</title><rect x="807.7" y="53" width="60.2" height="15.0" fill="rgb(218,133,47)" rx="2" ry="2" />
<text  x="810.68" y="63.5" >Data.B..</text>
</g>
<g >
<title>Data.ByteArray.Methods.unsafeCreate (268 samples, 26.80%)</title><rect x="163.4" y="101" width="316.2" height="15.0" fill="rgb(252,115,17)" rx="2" ry="2" />
<text  x="166.40" y="111.5" >Data.ByteArray.Methods.unsafeCreate</text>
</g>
<g >
<title>Control.Monad.Catch.bracket_ (996 samples, 99.60%)</title><rect x="10.0" y="277" width="1175.3" height="15.0" fill="rgb(210,66,49)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >Control.Monad.Catch.bracket_</text>
</g>
<g >
<title>Main.encodeBench (901 samples, 90.10%)</title><rect x="120.9" y="165" width="1063.2" height="15.0" fill="rgb(229,151,43)" rx="2" ry="2" />
<text  x="123.92" y="175.5" >Main.encodeBench</text>
</g>
<g >
<title>Data.ByteString.Base64.Internal.encodeBase64/complete (5 samples, 0.50%)</title><rect x="1173.5" y="37" width="5.9" height="15.0" fill="rgb(238,159,42)" rx="2" ry="2" />
<text  x="1176.48" y="47.5" ></text>
</g>
<g >
<title>Criterion.Analysis.analyseSample (90 samples, 9.00%)</title><rect x="10.0" y="229" width="106.2" height="15.0" fill="rgb(226,152,23)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >Criterion.An..</text>
</g>
<g >
<title>Statistics.Matrix.Algorithms.qr (23 samples, 2.30%)</title><rect x="34.8" y="101" width="27.1" height="15.0" fill="rgb(222,120,48)" rx="2" ry="2" />
<text  x="37.78" y="111.5" >S..</text>
</g>
<g >
<title>Main.encoder (881 samples, 88.10%)</title><rect x="144.5" y="133" width="1039.6" height="15.0" fill="rgb(249,171,41)" rx="2" ry="2" />
<text  x="147.52" y="143.5" >Main.encoder</text>
</g>
<g >
<title>Data.ByteString.Base64.Internal.base64Padded.\.\ (227 samples, 22.70%)</title><rect x="911.5" y="69" width="267.9" height="15.0" fill="rgb(245,175,42)" rx="2" ry="2" />
<text  x="914.52" y="79.5" >Data.ByteString.Base64.Internal.bas..</text>
</g>
<g >
<title>Control.Concurrent.Async.concurrently (86 samples, 8.60%)</title><rect x="10.0" y="149" width="101.5" height="15.0" fill="rgb(215,207,41)" rx="2" ry="2" />
<text  x="13.00" y="159.5" >Control.Conc..</text>
</g>
<g >
<title>Data.Scientific.fromFloatDigits (1 samples, 0.10%)</title><rect x="1184.1" y="213" width="1.2" height="15.0" fill="rgb(248,95,29)" rx="2" ry="2" />
<text  x="1187.10" y="223.5" ></text>
</g>
<g >
<title>System.IO.CodePage.withCodePage (996 samples, 99.60%)</title><rect x="10.0" y="341" width="1175.3" height="15.0" fill="rgb(215,5,42)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >System.IO.CodePage.withCodePage</text>
</g>
<g >
<title>Statistics.Regression.olsRegress (82 samples, 8.20%)</title><rect x="14.7" y="133" width="96.8" height="15.0" fill="rgb(251,114,15)" rx="2" ry="2" />
<text  x="17.72" y="143.5" >Statistics...</text>
</g>
<g >
<title>Criterion.Measurement.Types.nf (901 samples, 90.10%)</title><rect x="120.9" y="149" width="1063.2" height="15.0" fill="rgb(248,169,11)" rx="2" ry="2" />
<text  x="123.92" y="159.5" >Criterion.Measurement.Types.nf</text>
</g>
<g >
<title>Control.Concurrent.Async.forConcurrently_ (2 samples, 0.20%)</title><rect x="113.8" y="197" width="2.4" height="15.0" fill="rgb(242,109,32)" rx="2" ry="2" />
<text  x="116.84" y="207.5" ></text>
</g>
<g >
<title>Statistics.Matrix.unsafeIndex (6 samples, 0.60%)</title><rect x="104.4" y="101" width="7.1" height="15.0" fill="rgb(250,209,15)" rx="2" ry="2" />
<text  x="107.40" y="111.5" ></text>
</g>
<g >
<title>Criterion.Monad.withConfig (996 samples, 99.60%)</title><rect x="10.0" y="373" width="1175.3" height="15.0" fill="rgb(232,108,16)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >Criterion.Monad.withConfig</text>
</g>
<g >
<title>Criterion.Measurement.getGCStatistics (1 samples, 0.10%)</title><rect x="119.7" y="197" width="1.2" height="15.0" fill="rgb(232,26,10)" rx="2" ry="2" />
<text  x="122.74" y="207.5" ></text>
</g>
<g >
<title>Main.main.\ (901 samples, 90.10%)</title><rect x="120.9" y="197" width="1063.2" height="15.0" fill="rgb(221,16,45)" rx="2" ry="2" />
<text  x="123.92" y="207.5" >Main.main.\</text>
</g>
<g >
<title>Criterion.Internal.runOne (905 samples, 90.50%)</title><rect x="116.2" y="229" width="1067.9" height="15.0" fill="rgb(207,86,0)" rx="2" ry="2" />
<text  x="119.20" y="239.5" >Criterion.Internal.runOne</text>
</g>
<g >
<title>System.IO.CodePage.withCodePageOptions (996 samples, 99.60%)</title><rect x="10.0" y="325" width="1175.3" height="15.0" fill="rgb(222,54,37)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >System.IO.CodePage.withCodePageOptions</text>
</g>
<g >
<title>Statistics.Sample.varianceUnbiased (1 samples, 0.10%)</title><rect x="113.8" y="117" width="1.2" height="15.0" fill="rgb(253,77,39)" rx="2" ry="2" />
<text  x="116.84" y="127.5" ></text>
</g>
<g >
<title>all (1,000 samples, 100%)</title><rect x="10.0" y="469" width="1180.0" height="15.0" fill="rgb(217,133,2)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>Data.ByteString.Base64.Internal.base64Padded (262 samples, 26.20%)</title><rect x="874.9" y="101" width="309.2" height="15.0" fill="rgb(234,95,2)" rx="2" ry="2" />
<text  x="877.94" y="111.5" >Data.ByteString.Base64.Internal.base64Pad..</text>
</g>
<g >
<title>Statistics.Regression.rSquare (20 samples, 2.00%)</title><rect x="87.9" y="117" width="23.6" height="15.0" fill="rgb(247,178,35)" rx="2" ry="2" />
<text  x="90.88" y="127.5" >S..</text>
</g>
<g >
<title>Criterion.Main.defaultMain (996 samples, 99.60%)</title><rect x="10.0" y="421" width="1175.3" height="15.0" fill="rgb(223,91,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >Criterion.Main.defaultMain</text>
</g>
<g >
<title>Data.Aeson.Types.ToJSON.genericToJSON (1 samples, 0.10%)</title><rect x="1184.1" y="229" width="1.2" height="15.0" fill="rgb(216,100,40)" rx="2" ry="2" />
<text  x="1187.10" y="239.5" ></text>
</g>
<g >
<title>Data.ByteString.Base64.Internal.poke8 (2 samples, 0.20%)</title><rect x="659.0" y="53" width="2.4" height="15.0" fill="rgb(247,177,17)" rx="2" ry="2" />
<text  x="662.00" y="63.5" ></text>
</g>
<g >
<title>Main.main (996 samples, 99.60%)</title><rect x="10.0" y="437" width="1175.3" height="15.0" fill="rgb(235,23,50)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >Main.main</text>
</g>
<g >
<title>Criterion.Internal.runAndAnalyseOne (995 samples, 99.50%)</title><rect x="10.0" y="245" width="1174.1" height="15.0" fill="rgb(217,150,46)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >Criterion.Internal.runAndAnalyseOne</text>
</g>
<g >
<title>Data.Aeson.encode (1 samples, 0.10%)</title><rect x="1184.1" y="245" width="1.2" height="15.0" fill="rgb(253,138,26)" rx="2" ry="2" />
<text  x="1187.10" y="255.5" ></text>
</g>
<g >
<title>Main.main.bgroup_ (901 samples, 90.10%)</title><rect x="120.9" y="181" width="1063.2" height="15.0" fill="rgb(226,118,46)" rx="2" ry="2" />
<text  x="123.92" y="191.5" >Main.main.bgroup_</text>
</g>
<g >
<title>Control.Concurrent.Async.mapConcurrently_ (2 samples, 0.20%)</title><rect x="113.8" y="181" width="2.4" height="15.0" fill="rgb(239,63,39)" rx="2" ry="2" />
<text  x="116.84" y="191.5" ></text>
</g>
<g >
<title>Control.Concurrent.Async.concurrently (2 samples, 0.20%)</title><rect x="113.8" y="165" width="2.4" height="15.0" fill="rgb(208,166,31)" rx="2" ry="2" />
<text  x="116.84" y="175.5" ></text>
</g>
<g >
<title>Statistics.Regression.bootstrapRegress (88 samples, 8.80%)</title><rect x="10.0" y="197" width="103.8" height="15.0" fill="rgb(228,169,30)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >Statistics.R..</text>
</g>
<g >
<title>Data.ByteArray.Encoding.convertToBase (281 samples, 28.10%)</title><rect x="148.1" y="117" width="331.5" height="15.0" fill="rgb(228,13,23)" rx="2" ry="2" />
<text  x="151.06" y="127.5" >Data.ByteArray.Encoding.convertToBase</text>
</g>
<g >
<title>Data.Vector.Algorithms.Intro.sort (2 samples, 0.20%)</title><rect x="111.5" y="165" width="2.3" height="15.0" fill="rgb(226,36,0)" rx="2" ry="2" />
<text  x="114.48" y="175.5" ></text>
</g>
<g >
<title>Statistics.Matrix.norm (2 samples, 0.20%)</title><rect x="59.6" y="85" width="2.3" height="15.0" fill="rgb(249,7,39)" rx="2" ry="2" />
<text  x="62.56" y="95.5" ></text>
</g>
<g >
<title>Data.ByteString.Base64.Internal.encode/complete (12 samples, 1.20%)</title><rect x="647.2" y="69" width="14.2" height="15.0" fill="rgb(238,214,19)" rx="2" ry="2" />
<text  x="650.20" y="79.5" ></text>
</g>
<g >
<title>Statistics.Resampling.resampleVector (1 samples, 0.10%)</title><rect x="115.0" y="149" width="1.2" height="15.0" fill="rgb(221,26,22)" rx="2" ry="2" />
<text  x="118.02" y="159.5" ></text>
</g>
<g >
<title>Statistics.Matrix.unsafeIndex (6 samples, 0.60%)</title><rect x="80.8" y="85" width="7.1" height="15.0" fill="rgb(243,82,41)" rx="2" ry="2" />
<text  x="83.80" y="95.5" ></text>
</g>
<g >
<title>Statistics.Matrix.unsafeIndex (7 samples, 0.70%)</title><rect x="26.5" y="101" width="8.3" height="15.0" fill="rgb(250,160,48)" rx="2" ry="2" />
<text  x="29.52" y="111.5" ></text>
</g>
<g >
<title>Statistics.Function.sort (2 samples, 0.20%)</title><rect x="111.5" y="181" width="2.3" height="15.0" fill="rgb(238,30,22)" rx="2" ry="2" />
<text  x="114.48" y="191.5" ></text>
</g>
</g>
</svg>
