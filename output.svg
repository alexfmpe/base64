<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="470.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="453" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="453" > </text>
<g id="frames">
<g >
<title>Criterion.Internal.runAndAnalyseOne (990 samples, 99.00%)</title><rect x="10.0" y="197" width="1168.2" height="15.0" fill="rgb(241,157,16)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >Criterion.Internal.runAndAnalyseOne</text>
</g>
<g >
<title>Data.ByteString.Base64.Internal.encodeWith (155 samples, 15.50%)</title><rect x="672.0" y="85" width="182.9" height="15.0" fill="rgb(211,168,47)" rx="2" ry="2" />
<text  x="674.98" y="95.5" >Data.ByteString.Base64...</text>
</g>
<g >
<title>Control.Concurrent.Async.mapConcurrently (104 samples, 10.40%)</title><rect x="10.0" y="117" width="122.7" height="15.0" fill="rgb(214,24,22)" rx="2" ry="2" />
<text  x="13.00" y="127.5" >Control.Concurr..</text>
</g>
<g >
<title>Data.ByteString.Base64.Internal.peek8 (6 samples, 0.60%)</title><rect x="492.6" y="53" width="7.1" height="15.0" fill="rgb(247,199,43)" rx="2" ry="2" />
<text  x="495.62" y="63.5" ></text>
</g>
<g >
<title>Data.Aeson.Types.ToJSON.genericToJSON (2 samples, 0.20%)</title><rect x="1179.4" y="213" width="2.3" height="15.0" fill="rgb(245,169,26)" rx="2" ry="2" />
<text  x="1182.38" y="223.5" ></text>
</g>
<g >
<title>Main.main (994 samples, 99.40%)</title><rect x="10.0" y="389" width="1172.9" height="15.0" fill="rgb(224,148,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >Main.main</text>
</g>
<g >
<title>Data.ByteString.Base64.Internal.encode/complete (5 samples, 0.50%)</title><rect x="753.4" y="53" width="5.9" height="15.0" fill="rgb(213,106,45)" rx="2" ry="2" />
<text  x="756.40" y="63.5" ></text>
</g>
<g >
<title>Data.ByteString.Base64.decode (108 samples, 10.80%)</title><rect x="372.3" y="101" width="127.4" height="15.0" fill="rgb(207,26,49)" rx="2" ry="2" />
<text  x="375.26" y="111.5" >Data.ByteString...</text>
</g>
<g >
<title>Data.ByteString.Base64.Internal.peek8 (1 samples, 0.10%)</title><rect x="756.9" y="37" width="1.2" height="15.0" fill="rgb(245,184,23)" rx="2" ry="2" />
<text  x="759.94" y="47.5" ></text>
</g>
<g >
<title>Main.decodeBench (304 samples, 30.40%)</title><rect x="141.0" y="149" width="358.7" height="15.0" fill="rgb(220,175,3)" rx="2" ry="2" />
<text  x="143.98" y="159.5" >Main.decodeBench</text>
</g>
<g >
<title>Data.Aeson.Types.ToJSON.genericToJSON (1 samples, 0.10%)</title><rect x="1178.2" y="181" width="1.2" height="15.0" fill="rgb(251,148,37)" rx="2" ry="2" />
<text  x="1181.20" y="191.5" ></text>
</g>
<g >
<title>Data.ByteString.Base64.encodeBase64 (132 samples, 13.20%)</title><rect x="854.9" y="101" width="155.7" height="15.0" fill="rgb(215,100,51)" rx="2" ry="2" />
<text  x="857.88" y="111.5" >Data.ByteString.Base..</text>
</g>
<g >
<title>Statistics.Matrix.norm (2 samples, 0.20%)</title><rect x="70.2" y="37" width="2.3" height="15.0" fill="rgb(239,120,46)" rx="2" ry="2" />
<text  x="73.18" y="47.5" ></text>
</g>
<g >
<title>Statistics.Regression.olsRegress (96 samples, 9.60%)</title><rect x="19.4" y="85" width="113.3" height="15.0" fill="rgb(246,195,49)" rx="2" ry="2" />
<text  x="22.44" y="95.5" >Statistics.Reg..</text>
</g>
<g >
<title>Statistics.Matrix.unsafeIndex (7 samples, 0.70%)</title><rect x="124.5" y="53" width="8.2" height="15.0" fill="rgb(243,70,12)" rx="2" ry="2" />
<text  x="127.46" y="63.5" ></text>
</g>
<g >
<title>Main.encoder (560 samples, 56.00%)</title><rect x="517.4" y="117" width="660.8" height="15.0" fill="rgb(217,130,16)" rx="2" ry="2" />
<text  x="520.40" y="127.5" >Main.encoder</text>
</g>
<g >
<title>Data.ByteString.Base64.Internal.decodeWithTable/fill (74 samples, 7.40%)</title><rect x="412.4" y="69" width="87.3" height="15.0" fill="rgb(211,11,30)" rx="2" ry="2" />
<text  x="415.38" y="79.5" >Data.ByteS..</text>
</g>
<g >
<title>Statistics.Function.sort (2 samples, 0.20%)</title><rect x="132.7" y="133" width="2.4" height="15.0" fill="rgb(207,208,26)" rx="2" ry="2" />
<text  x="135.72" y="143.5" ></text>
</g>
<g >
<title>Criterion.Main.defaultMainWith (994 samples, 99.40%)</title><rect x="10.0" y="357" width="1172.9" height="15.0" fill="rgb(247,104,24)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >Criterion.Main.defaultMainWith</text>
</g>
<g >
<title>Criterion.Main.defaultMain (994 samples, 99.40%)</title><rect x="10.0" y="373" width="1172.9" height="15.0" fill="rgb(242,64,47)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >Criterion.Main.defaultMain</text>
</g>
<g >
<title>Data.Vector.Algorithms.Intro.sort (2 samples, 0.20%)</title><rect x="132.7" y="117" width="2.4" height="15.0" fill="rgb(242,71,27)" rx="2" ry="2" />
<text  x="135.72" y="127.5" ></text>
</g>
<g >
<title>Criterion.Monad.withConfig (994 samples, 99.40%)</title><rect x="10.0" y="325" width="1172.9" height="15.0" fill="rgb(252,112,44)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >Criterion.Monad.withConfig</text>
</g>
<g >
<title>Statistics.Matrix.transpose (19 samples, 1.90%)</title><rect x="80.8" y="53" width="22.4" height="15.0" fill="rgb(221,38,8)" rx="2" ry="2" />
<text  x="83.80" y="63.5" >S..</text>
</g>
<g >
<title>Main.decoder (230 samples, 23.00%)</title><rect x="228.3" y="117" width="271.4" height="15.0" fill="rgb(248,119,53)" rx="2" ry="2" />
<text  x="231.30" y="127.5" >Main.decoder</text>
</g>
<g >
<title>Data.Scientific.fromFloatDigits (2 samples, 0.20%)</title><rect x="1179.4" y="197" width="2.3" height="15.0" fill="rgb(246,185,7)" rx="2" ry="2" />
<text  x="1182.38" y="207.5" ></text>
</g>
<g >
<title>all (1,000 samples, 100%)</title><rect x="10.0" y="421" width="1180.0" height="15.0" fill="rgb(251,9,15)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>Statistics.Regression.bootstrapRegress (106 samples, 10.60%)</title><rect x="10.0" y="149" width="125.1" height="15.0" fill="rgb(206,43,14)" rx="2" ry="2" />
<text  x="13.00" y="159.5" >Statistics.Regr..</text>
</g>
<g >
<title>Criterion.Analysis.analyseSample (107 samples, 10.70%)</title><rect x="10.0" y="181" width="126.3" height="15.0" fill="rgb(229,136,46)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >Criterion.Analy..</text>
</g>
<g >
<title>Data.ByteString.Base64.Internal.encode/fill (149 samples, 14.90%)</title><rect x="679.1" y="69" width="175.8" height="15.0" fill="rgb(212,113,30)" rx="2" ry="2" />
<text  x="682.06" y="79.5" >Data.ByteString.Base64..</text>
</g>
<g >
<title>Criterion.Measurement.Types.nf (575 samples, 57.50%)</title><rect x="499.7" y="133" width="678.5" height="15.0" fill="rgb(220,32,14)" rx="2" ry="2" />
<text  x="502.70" y="143.5" >Criterion.Measurement.Types.nf</text>
</g>
<g >
<title>Control.Monad.Catch.finally (991 samples, 99.10%)</title><rect x="10.0" y="245" width="1169.4" height="15.0" fill="rgb(239,91,2)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >Control.Monad.Catch.finally</text>
</g>
<g >
<title>Control.Monad.Catch.bracket_ (991 samples, 99.10%)</title><rect x="10.0" y="229" width="1169.4" height="15.0" fill="rgb(225,46,41)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >Control.Monad.Catch.bracket_</text>
</g>
<g >
<title>Control.Concurrent.Async.concurrently (1 samples, 0.10%)</title><rect x="135.1" y="117" width="1.2" height="15.0" fill="rgb(251,144,37)" rx="2" ry="2" />
<text  x="138.08" y="127.5" ></text>
</g>
<g >
<title>Data.Text.Encoding.Base64.encodeBase64 (142 samples, 14.20%)</title><rect x="1010.6" y="101" width="167.6" height="15.0" fill="rgb(241,161,31)" rx="2" ry="2" />
<text  x="1013.64" y="111.5" >Data.Text.Encoding.Ba..</text>
</g>
<g >
<title>Criterion.Report.report (3 samples, 0.30%)</title><rect x="1179.4" y="245" width="3.5" height="15.0" fill="rgb(222,183,14)" rx="2" ry="2" />
<text  x="1182.38" y="255.5" ></text>
</g>
<g >
<title>Data.ByteString.Base64.encodeBase64 (31 samples, 3.10%)</title><rect x="1141.6" y="85" width="36.6" height="15.0" fill="rgb(241,51,18)" rx="2" ry="2" />
<text  x="1144.62" y="95.5" >Dat..</text>
</g>
<g >
<title>Criterion.Measurement.getGCStatistics (1 samples, 0.10%)</title><rect x="139.8" y="149" width="1.2" height="15.0" fill="rgb(209,65,13)" rx="2" ry="2" />
<text  x="142.80" y="159.5" ></text>
</g>
<g >
<title>UNKNOWN (6 samples, 0.60%)</title><rect x="1182.9" y="405" width="7.1" height="15.0" fill="rgb(212,83,0)" rx="2" ry="2" />
<text  x="1185.92" y="415.5" ></text>
</g>
<g >
<title>Data.ByteString.Base64.Internal.decodeWithTable (105 samples, 10.50%)</title><rect x="375.8" y="85" width="123.9" height="15.0" fill="rgb(209,199,23)" rx="2" ry="2" />
<text  x="378.80" y="95.5" >Data.ByteString..</text>
</g>
<g >
<title>Data.Aeson.encode (1 samples, 0.10%)</title><rect x="1178.2" y="197" width="1.2" height="15.0" fill="rgb(223,61,31)" rx="2" ry="2" />
<text  x="1181.20" y="207.5" ></text>
</g>
<g >
<title>Data.ByteString.Base64.Internal.base64Padded (123 samples, 12.30%)</title><rect x="865.5" y="85" width="145.1" height="15.0" fill="rgb(236,224,11)" rx="2" ry="2" />
<text  x="868.50" y="95.5" >Data.ByteString.Ba..</text>
</g>
<g >
<title>Statistics.Resampling.resample (1 samples, 0.10%)</title><rect x="135.1" y="165" width="1.2" height="15.0" fill="rgb(223,43,20)" rx="2" ry="2" />
<text  x="138.08" y="175.5" ></text>
</g>
<g >
<title>Statistics.Matrix.unsafeIndex (8 samples, 0.80%)</title><rect x="33.6" y="53" width="9.4" height="15.0" fill="rgb(216,40,22)" rx="2" ry="2" />
<text  x="36.60" y="63.5" ></text>
</g>
<g >
<title>Statistics.Regression.rSquare (25 samples, 2.50%)</title><rect x="103.2" y="69" width="29.5" height="15.0" fill="rgb(235,160,31)" rx="2" ry="2" />
<text  x="106.22" y="79.5" >St..</text>
</g>
<g >
<title>Data.Scientific.fromFloatDigits (1 samples, 0.10%)</title><rect x="1178.2" y="165" width="1.2" height="15.0" fill="rgb(215,209,33)" rx="2" ry="2" />
<text  x="1181.20" y="175.5" ></text>
</g>
<g >
<title>System.IO.CodePage.withCodePageOptions (994 samples, 99.40%)</title><rect x="10.0" y="277" width="1172.9" height="15.0" fill="rgb(230,75,29)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >System.IO.CodePage.withCodePageOptions</text>
</g>
<g >
<title>Data.Aeson.Types.ToJSON.genericToJSON (1 samples, 0.10%)</title><rect x="1181.7" y="197" width="1.2" height="15.0" fill="rgb(215,22,20)" rx="2" ry="2" />
<text  x="1184.74" y="207.5" ></text>
</g>
<g >
<title>Control.Concurrent.Async.mapConcurrently_ (1 samples, 0.10%)</title><rect x="135.1" y="133" width="1.2" height="15.0" fill="rgb(242,2,15)" rx="2" ry="2" />
<text  x="138.08" y="143.5" ></text>
</g>
<g >
<title>Criterion.Measurement.Types.nf (304 samples, 30.40%)</title><rect x="141.0" y="133" width="358.7" height="15.0" fill="rgb(211,75,49)" rx="2" ry="2" />
<text  x="143.98" y="143.5" >Criterion.Measurement.Types.nf</text>
</g>
<g >
<title>Data.Memory.Encoding.Base64.fromBase64 (7 samples, 0.70%)</title><rect x="359.3" y="85" width="8.2" height="15.0" fill="rgb(240,225,13)" rx="2" ry="2" />
<text  x="362.28" y="95.5" ></text>
</g>
<g >
<title>Data.ByteArray.Encoding.convertFromBase (115 samples, 11.50%)</title><rect x="236.6" y="101" width="135.7" height="15.0" fill="rgb(245,73,6)" rx="2" ry="2" />
<text  x="239.56" y="111.5" >Data.ByteArray.En..</text>
</g>
<g >
<title>Data.Memory.Encoding.Base64.toBase64 (108 samples, 10.80%)</title><rect x="544.5" y="69" width="127.5" height="15.0" fill="rgb(254,17,43)" rx="2" ry="2" />
<text  x="547.54" y="79.5" >Data.Memory.Enco..</text>
</g>
<g >
<title>Data.Memory.Encoding.Base64.unBase64Length (4 samples, 0.40%)</title><rect x="367.5" y="85" width="4.8" height="15.0" fill="rgb(237,183,44)" rx="2" ry="2" />
<text  x="370.54" y="95.5" ></text>
</g>
<g >
<title>Data.ByteString.Base64.encode (155 samples, 15.50%)</title><rect x="672.0" y="101" width="182.9" height="15.0" fill="rgb(223,192,45)" rx="2" ry="2" />
<text  x="674.98" y="111.5" >Data.ByteString.Base64...</text>
</g>
<g >
<title>Criterion.Analysis.regress (106 samples, 10.60%)</title><rect x="10.0" y="165" width="125.1" height="15.0" fill="rgb(229,192,10)" rx="2" ry="2" />
<text  x="13.00" y="175.5" >Criterion.Analy..</text>
</g>
<g >
<title>Statistics.Resampling.resampleVector (1 samples, 0.10%)</title><rect x="135.1" y="101" width="1.2" height="15.0" fill="rgb(231,43,1)" rx="2" ry="2" />
<text  x="138.08" y="111.5" ></text>
</g>
<g >
<title>Data.ByteString.Base64.Internal.peek8 (25 samples, 2.50%)</title><rect x="825.4" y="37" width="29.5" height="15.0" fill="rgb(253,90,30)" rx="2" ry="2" />
<text  x="828.38" y="47.5" >Da..</text>
</g>
<g >
<title>Control.Concurrent.Async.forConcurrently (104 samples, 10.40%)</title><rect x="10.0" y="133" width="122.7" height="15.0" fill="rgb(228,38,41)" rx="2" ry="2" />
<text  x="13.00" y="143.5" >Control.Concurr..</text>
</g>
<g >
<title>System.IO.CodePage.withCodePage (994 samples, 99.40%)</title><rect x="10.0" y="293" width="1172.9" height="15.0" fill="rgb(227,44,37)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >System.IO.CodePage.withCodePage</text>
</g>
<g >
<title>Control.Monad.Catch.bracket (991 samples, 99.10%)</title><rect x="10.0" y="213" width="1169.4" height="15.0" fill="rgb(228,20,48)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >Control.Monad.Catch.bracket</text>
</g>
<g >
<title>Data.ByteArray.Encoding.convertToBase (128 samples, 12.80%)</title><rect x="520.9" y="101" width="151.1" height="15.0" fill="rgb(237,86,29)" rx="2" ry="2" />
<text  x="523.94" y="111.5" >Data.ByteArray.Enco..</text>
</g>
<g >
<title>Data.ByteString.Base64.Internal.peek8_32 (81 samples, 8.10%)</title><rect x="759.3" y="53" width="95.6" height="15.0" fill="rgb(235,55,23)" rx="2" ry="2" />
<text  x="762.30" y="63.5" >Data.ByteSt..</text>
</g>
<g >
<title>Statistics.Regression.ols (51 samples, 5.10%)</title><rect x="43.0" y="69" width="60.2" height="15.0" fill="rgb(233,157,40)" rx="2" ry="2" />
<text  x="46.04" y="79.5" >Statis..</text>
</g>
<g >
<title>Data.ByteArray.Methods.unsafeCreate (122 samples, 12.20%)</title><rect x="528.0" y="85" width="144.0" height="15.0" fill="rgb(223,106,38)" rx="2" ry="2" />
<text  x="531.02" y="95.5" >Data.ByteArray.Met..</text>
</g>
<g >
<title>Data.Aeson.encode (1 samples, 0.10%)</title><rect x="1181.7" y="213" width="1.2" height="15.0" fill="rgb(219,184,22)" rx="2" ry="2" />
<text  x="1184.74" y="223.5" ></text>
</g>
<g >
<title>Data.ByteString.Base64.Internal.poke8 (1 samples, 0.10%)</title><rect x="758.1" y="37" width="1.2" height="15.0" fill="rgb(238,160,10)" rx="2" ry="2" />
<text  x="761.12" y="47.5" ></text>
</g>
<g >
<title>Control.Concurrent.Async.forConcurrently_ (1 samples, 0.10%)</title><rect x="135.1" y="149" width="1.2" height="15.0" fill="rgb(252,221,10)" rx="2" ry="2" />
<text  x="138.08" y="159.5" ></text>
</g>
<g >
<title>Criterion.Report.formatReport (3 samples, 0.30%)</title><rect x="1179.4" y="229" width="3.5" height="15.0" fill="rgb(231,48,11)" rx="2" ry="2" />
<text  x="1182.38" y="239.5" ></text>
</g>
<g >
<title>System.IO.CodePage.withCP65001 (994 samples, 99.40%)</title><rect x="10.0" y="309" width="1172.9" height="15.0" fill="rgb(254,82,27)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >System.IO.CodePage.withCP65001</text>
</g>
<g >
<title>Criterion.Internal.runAndAnalyse (994 samples, 99.40%)</title><rect x="10.0" y="261" width="1172.9" height="15.0" fill="rgb(215,175,17)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >Criterion.Internal.runAndAnalyse</text>
</g>
<g >
<title>Control.Concurrent.Async.concurrently (104 samples, 10.40%)</title><rect x="10.0" y="101" width="122.7" height="15.0" fill="rgb(205,103,23)" rx="2" ry="2" />
<text  x="13.00" y="111.5" >Control.Concurr..</text>
</g>
<g >
<title>Main.encodeBench (575 samples, 57.50%)</title><rect x="499.7" y="149" width="678.5" height="15.0" fill="rgb(243,223,42)" rx="2" ry="2" />
<text  x="502.70" y="159.5" >Main.encodeBench</text>
</g>
<g >
<title>Criterion.Main.runMode (994 samples, 99.40%)</title><rect x="10.0" y="341" width="1172.9" height="15.0" fill="rgb(213,183,27)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >Criterion.Main.runMode</text>
</g>
<g >
<title>Statistics.Matrix.multiplyV (7 samples, 0.70%)</title><rect x="72.5" y="53" width="8.3" height="15.0" fill="rgb(212,224,7)" rx="2" ry="2" />
<text  x="75.54" y="63.5" ></text>
</g>
<g >
<title>Statistics.Matrix.unsafeIndex (7 samples, 0.70%)</title><rect x="95.0" y="37" width="8.2" height="15.0" fill="rgb(237,9,3)" rx="2" ry="2" />
<text  x="97.96" y="47.5" ></text>
</g>
<g >
<title>Data.Scientific.fromFloatDigits (1 samples, 0.10%)</title><rect x="1181.7" y="181" width="1.2" height="15.0" fill="rgb(220,75,51)" rx="2" ry="2" />
<text  x="1184.74" y="191.5" ></text>
</g>
<g >
<title>Statistics.Matrix.Algorithms.qr (25 samples, 2.50%)</title><rect x="43.0" y="53" width="29.5" height="15.0" fill="rgb(250,70,7)" rx="2" ry="2" />
<text  x="46.04" y="63.5" >St..</text>
</g>
<g >
<title>MAIN.MAIN (994 samples, 99.40%)</title><rect x="10.0" y="405" width="1172.9" height="15.0" fill="rgb(226,104,53)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >MAIN.MAIN</text>
</g>
<g >
<title>Criterion.Internal.runOne (883 samples, 88.30%)</title><rect x="136.3" y="181" width="1041.9" height="15.0" fill="rgb(249,219,44)" rx="2" ry="2" />
<text  x="139.26" y="191.5" >Criterion.Internal.runOne</text>
</g>
<g >
<title>Criterion.Measurement.runBenchmark (883 samples, 88.30%)</title><rect x="136.3" y="165" width="1041.9" height="15.0" fill="rgb(251,61,8)" rx="2" ry="2" />
<text  x="139.26" y="175.5" >Criterion.Measurement.runBenchmark</text>
</g>
<g >
<title>Statistics.Matrix.transpose (20 samples, 2.00%)</title><rect x="19.4" y="69" width="23.6" height="15.0" fill="rgb(230,124,14)" rx="2" ry="2" />
<text  x="22.44" y="79.5" >S..</text>
</g>
<g >
<title>Data.ByteString.Base64.Internal.base64Padded (28 samples, 2.80%)</title><rect x="1145.2" y="69" width="33.0" height="15.0" fill="rgb(249,162,12)" rx="2" ry="2" />
<text  x="1148.16" y="79.5" >Da..</text>
</g>
</g>
</svg>
