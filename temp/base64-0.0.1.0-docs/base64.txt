-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | RFC 4648-compliant padded and unpadded base64 and base64url encodings
--   
--   RFC 4648-compliant padded and unpadded base64 and base64url encodings
--   and decoding combinators. Additionally, <a>Text</a>-based variants are
--   provided.
@package base64
@version 0.0.1.0


-- | This module contains the combinators implementing the RFC 4648
--   specification for the Base64 encoding including unpadded and lenient
--   variants
module Data.ByteString.Base64

-- | Encode a <a>ByteString</a> in base64 with padding.
--   
--   See: RFC-4648 section 4
encodeBase64 :: ByteString -> ByteString

-- | Decode a padded base64-encoded <a>ByteString</a>
--   
--   See: RFC-4648 section 4
decodeBase64 :: ByteString -> Either Text ByteString

-- | Encode a <a>ByteString</a> in base64 without padding.
--   
--   Note: in some circumstances, the use of padding ("=") in base-encoded
--   data is not required or used. This is not one of them. If you are
--   absolutely sure the length of your bytestring is divisible by 3, this
--   function will be the same as <a>encodeBase64</a> with padding,
--   however, if not, you may see garbage appended to your bytestring in
--   the form of "NUL".
--   
--   Only call unpadded variants when you can make assumptions about the
--   length of your input data.
--   
--   See: RFC-4648 section 3.2
encodeBase64Unpadded :: ByteString -> ByteString

-- | Decode an unpadded base64-encoded <a>ByteString</a>
--   
--   See: RFC-4648 section 3.2
decodeBase64Unpadded :: ByteString -> Either Text ByteString


-- | This module contains the combinators implementing the RFC 4648
--   specification for the Base64-URL encoding including unpadded and
--   lenient variants
module Data.ByteString.Base64.URL

-- | Encode a <a>ByteString</a> in base64-url with padding.
--   
--   See: RFC-4648 section 5
encodeBase64 :: ByteString -> ByteString

-- | Decode a padded base64-url encoded <a>ByteString</a>
--   
--   See: RFC-4648 section 4
decodeBase64 :: ByteString -> Either Text ByteString

-- | Encode a <a>ByteString</a> in base64-url without padding.
--   
--   Note: in some circumstances, the use of padding ("=") in base-encoded
--   data is not required or used. If you are absolutely sure the length of
--   your input data is divisible by 3, this function will be the same as
--   <a>encodeBase64</a> with padding. However, if not, you may see garbage
--   appended to output in the form of "NUL".
--   
--   Only call unpadded variants when you can make assumptions about the
--   length of your input data.
--   
--   See: RFC-4648 section 3.2
encodeBase64Unpadded :: ByteString -> ByteString

-- | Decode an unpadded base64-url encoded <a>ByteString</a>
--   
--   See: RFC-4648 section 4
decodeBase64Unpadded :: ByteString -> Either Text ByteString


-- | This module contains the <a>HasBase64</a> instance for <tt>Text</tt>,
--   which is defined to be the collection of <a>Prism</a>s defining the
--   RFC 4648 specification for the Base64 encoding format.
--   
--   In order to expose this file, you must build the package with
--   '-foptics' enabled.
module Data.ByteString.Base64.Lens

-- | If a particular type <tt>s</tt> has a base64 representation for any of
--   its focii, this class provides the optical interface for satisfying
--   the padded base64 spec in RFC 4648
class HasBase64 s where {
    type family Base64 s;
}

-- | A prism into a base64-encoded focus of some type
--   
--   Examples:
--   
--   <pre>
--   &gt;&gt;&gt; _Base64 @Text # "Sun"
--   "UV3u"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; _Base64 @Text # "&lt;&lt;???&gt;&gt;"
--   "PDw/Pz8+Pg=="
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; "PDw/Pz8+Pg==" ^. _Base64
--   "&lt;&lt;???&gt;&gt;"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; "PDw/Pz8+Pg==" ^? _Base64
--   Just "&lt;&lt;???&gt;&gt;"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; "PDw_Pz8-Pg==" ^. _Base64
--   ""
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; "PDw_Pz8-Pg==" ^? _Base64
--   Nothing
--   </pre>
_Base64 :: HasBase64 s => Prism' s (Base64 s)

-- | A prism into the base64url-encoded focus of some type
--   
--   Examples:
--   
--   <pre>
--   &gt;&gt;&gt; _Base64Url @Text # "Sun"
--   "UV3u"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; _Base64Url @Text # "&lt;&lt;???&gt;&gt;"
--   "PDw_Pz8-Pg=="
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; "PDw_Pz8-Pg==" ^. _Base64Url
--   "&lt;&lt;???&gt;&gt;"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; "PDw_Pz8-Pg==" ^? _Base64Url
--   Just "&lt;&lt;???&gt;&gt;"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; "PDw/Pz8+Pg==" ^. _Base64Url
--   ""
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; "PDw/Pz8+Pg==" ^? _Base64Url
--   Nothing
--   </pre>
_Base64Url :: HasBase64 s => Prism' s (Base64 s)

-- | If a particular type <tt>a</tt> has an unpadded base64 representation
--   for any of its focii, this class provides the optical interface for
--   satisfying the unpadded base64 spec in RFC 4648
class HasBase64Unpadded s where {
    type family Base64Nopad s;
}

-- | A prism into the unpadded base64-encoded focus of some type
_Base64Unpadded :: HasBase64Unpadded s => Prism' s (Base64Nopad s)

-- | A prism into the unpadded base64url-encoded focus of some type
_Base64UrlUnpadded :: HasBase64Unpadded s => Prism' s (Base64Nopad s)
instance Data.ByteString.Base64.Lens.HasBase64Unpadded Data.ByteString.Internal.ByteString
instance Data.ByteString.Base64.Lens.HasBase64 Data.ByteString.Internal.ByteString


-- | This module contains the combinators implementing the RFC 4648
--   specification for the Base64 encoding including unpadded and lenient
--   variants
module Data.Text.Encoding.Base64

-- | Encode <a>Text</a> in base64 with padding.
--   
--   See: RFC-4648 section 5
encodeBase64 :: Text -> Text

-- | Decode a padded base64 encoded <a>Text</a> value
--   
--   See: RFC-4648 section 4
decodeBase64 :: Text -> Either Text Text

-- | Encode a <a>Text</a> in base64 without padding.
--   
--   Note: in some circumstances, the use of padding ("=") in base-encoded
--   data is not required or used. If you are absolutely sure the length of
--   your input data is divisible by 3, this function will be the same as
--   <a>encodeBase64</a> with padding. However, if not, you may see garbage
--   appended to output in the form of "NUL".
--   
--   Only call unpadded variants when you can make assumptions about the
--   length of your input data.
--   
--   See: RFC-4648 section 3.2
encodeBase64Unpadded :: Text -> Text

-- | Decode an unpadded base64 encoded <a>Text</a>
--   
--   See: RFC-4648 section 4
decodeBase64Unpadded :: Text -> Either Text Text


-- | This module contains the combinators implementing the RFC 4648
--   specification for the Base64-URL encoding including unpadded and
--   lenient variants
module Data.Text.Encoding.Base64.URL

-- | Encode a <a>Text</a> in base64-url with padding.
--   
--   See: RFC-4648 section 5
encodeBase64 :: Text -> Text

-- | Decode a padded base64-url encoded <a>Text</a>
--   
--   See: RFC-4648 section 4
decodeBase64 :: Text -> Either Text Text

-- | Encode a <a>Text</a> value in base64-url without padding.
--   
--   Note: in some circumstances, the use of padding ("=") in base-encoded
--   data is not required or used. If you are absolutely sure the length of
--   your input data is divisible by 3, this function will be the same as
--   <a>encodeBase64</a> with padding. However, if not, you may see garbage
--   appended to output in the form of "NUL".
--   
--   Only call unpadded variants when you can make assumptions about the
--   length of your input data.
--   
--   See: RFC-4648 section 3.2
encodeBase64Unpadded :: Text -> Text

-- | Decode an unpadded base64-url encoded <a>Text</a> value
--   
--   See: RFC-4648 section 4
decodeBase64Unpadded :: Text -> Either Text Text


-- | This module contains the <a>HasBase64</a> and <a>HasBase64Unpadded</a>
--   instances for <a>Text</a>, which defined to be the collection of
--   <a>Prism</a>s defining the RFC 4648 specification for the padded and
--   unpadded Base64 encoding format.
--   
--   These typeclasses are re-exported for convenience
module Data.Text.Encoding.Base64.Lens

-- | If a particular type <tt>s</tt> has a base64 representation for any of
--   its focii, this class provides the optical interface for satisfying
--   the padded base64 spec in RFC 4648
class HasBase64 s where {
    type family Base64 s;
}

-- | A prism into a base64-encoded focus of some type
--   
--   Examples:
--   
--   <pre>
--   &gt;&gt;&gt; _Base64 @Text # "Sun"
--   "UV3u"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; _Base64 @Text # "&lt;&lt;???&gt;&gt;"
--   "PDw/Pz8+Pg=="
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; "PDw/Pz8+Pg==" ^. _Base64
--   "&lt;&lt;???&gt;&gt;"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; "PDw/Pz8+Pg==" ^? _Base64
--   Just "&lt;&lt;???&gt;&gt;"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; "PDw_Pz8-Pg==" ^. _Base64
--   ""
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; "PDw_Pz8-Pg==" ^? _Base64
--   Nothing
--   </pre>
_Base64 :: HasBase64 s => Prism' s (Base64 s)

-- | A prism into the base64url-encoded focus of some type
--   
--   Examples:
--   
--   <pre>
--   &gt;&gt;&gt; _Base64Url @Text # "Sun"
--   "UV3u"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; _Base64Url @Text # "&lt;&lt;???&gt;&gt;"
--   "PDw_Pz8-Pg=="
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; "PDw_Pz8-Pg==" ^. _Base64Url
--   "&lt;&lt;???&gt;&gt;"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; "PDw_Pz8-Pg==" ^? _Base64Url
--   Just "&lt;&lt;???&gt;&gt;"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; "PDw/Pz8+Pg==" ^. _Base64Url
--   ""
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; "PDw/Pz8+Pg==" ^? _Base64Url
--   Nothing
--   </pre>
_Base64Url :: HasBase64 s => Prism' s (Base64 s)

-- | If a particular type <tt>a</tt> has an unpadded base64 representation
--   for any of its focii, this class provides the optical interface for
--   satisfying the unpadded base64 spec in RFC 4648
class HasBase64Unpadded s where {
    type family Base64Nopad s;
}

-- | A prism into the unpadded base64-encoded focus of some type
_Base64Unpadded :: HasBase64Unpadded s => Prism' s (Base64Nopad s)

-- | A prism into the unpadded base64url-encoded focus of some type
_Base64UrlUnpadded :: HasBase64Unpadded s => Prism' s (Base64Nopad s)
instance Data.ByteString.Base64.Lens.HasBase64 Data.Text.Internal.Text
instance Data.ByteString.Base64.Lens.HasBase64Unpadded Data.Text.Internal.Text
